function testAnimations

addpath('../lib/SpriteKit');
close(gcf)

G = SpriteKit.Game.instance('Title','Flying Membrane Demo', 'ShowFPS', false);

%% Setup the Sprite
s = SpriteKit.Sprite('fishone');
for k=1:10
    spritename = sprintf('FISHY_TURN_%d',k);
    pngFile = ['../img/fixed/' spritename '.png'];
    s.initState(spritename, pngFile, true);
end
iter = 1;

% [nBubbles, posBubbles, ] = makeBubbles_abs(0,0);

bubbles = SpriteKit.Sprite('bubbles');
for k=1:4
    spritename = sprintf('bubbles_%d',k);
    pngFile = ['../img/fixed/' spritename '.png'];
    s.initState(spritename, pngFile, true);
end


statusCounter = 1;
bubble = {};

%% Run it!
G.play(@action);

%% Function to be called on each tic/toc of gameplay
    function action
        
        % increase the scaling
        %     s.Scale = s.Scale+0.01;
        
%         s.cycleNext
        % cycle next layer
        if (mod(floor(iter/10), 4) == 0)
            s.cycleNext;
        end
%         s.State
%         if (mod(floor(iter/10), 4) == 0)
%             s.State = sprintf('FISHY_TURN_%d',mod(floor(iter/2), 10) + 1);
%         end
        % update position and angle
        %     s.Location = P(iter,:);  % use dot assignment...
        %     set(s,'Angle',iter)      % or "set"
        %
        if iter==40 % stop processing
            G.stop();
            
        end
        
        iter = iter+1;

        for iBubbles = 1 : nBubbles(statusCounter)
            bubble{end + 1} = rectangle('Curvature', [1 1], 'Position', [posBubbles(statusCounter).b{iBubbles}], 'FaceColor', [0 115 255]./255, ...
                'EdgeColor', [198 241 255]./255, 'LineWidth', 2)
        end

        
    end


rmpath('../lib/SpriteKit');

end